package main

import (
	"database/sql"
	"flag"
	"fmt"
	"github.com/PuerkitoBio/goquery"
	_ "github.com/go-sql-driver/mysql"
	"github.com/google/uuid"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"os"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"time"
)

var db = &sql.DB{}

// 用户
var username string

// 密码
var password string

// 主机名
var host string

// 端口号
var port int

// 端口号
var startNum int

// 端口号
var endNum int

// 动作
var action string

// 数据厍
var tableName string

//更新数量
var limit string

func init() {

	flag.StringVar(&username, "u", "root", "用户名,默认:root")
	flag.StringVar(&password, "p", "root", "密码,默认:root")
	flag.StringVar(&host, "h", "127.0.0.1", "主机名,默认 127.0.0.1")
	flag.StringVar(&tableName, "t", "ddc_copyf_com", "数据厍名,默认 book")
	flag.IntVar(&port, "P", 3306, "端口号,默认：3306")
	flag.IntVar(&startNum, "s", 1, "采集开始编号")
	flag.IntVar(&endNum, "e", 42190, "采集结束编号")
	flag.StringVar(&action, "action", "add", "动作：新增 （add）或 更新三天内 (update) 或 更新全部 (updateAll) 或 更新3-10天 (updatePart) 或 获取内容 (content),默认：为 更新")
	flag.StringVar(&limit, "limit", "10000", "一次更新多少条")
	flag.Parse()

	dataSourceName := fmt.Sprintf("%s:%s@tcp(%s:%d)/%s", username, password, host, port, tableName)
	db, _ = sql.Open("mysql", dataSourceName)
}

type Result interface {
	// LastInsertId returns the integer generated by the database
	// in response to a command. Typically this will be from an
	// "auto increment" column when inserting a new row. Not all
	// databases support this feature, and the syntax of such
	// statements varies.
	LastInsertId() (int64, error)

	// RowsAffected returns the number of rows affected by an
	// update, insert, or delete. Not every database or database
	// driver may support this.
	RowsAffected() (int64, error)
}

func main() {
	if action == "add" {
		add()
	}

	if action == "update" {
		update()
	}

	if action == "updatePart" {
		update()
	}

	if action == "updateAll" {
		update()
	}

	if action == "content" {
		bookContent()
	}
}

func add() {
	fmt.Println(time.Now())

	for i := 263; i >= 1; i-- {
		tx, _ := db.Begin()
		num := strconv.Itoa(i)
		url := "https://w3layouts.com/website-templates/page/" + num + "/"
		// Request the HTML page.
		res, err := http.Get(url)
		if err != nil {
			log.Fatal(err)
		}
		defer res.Body.Close()
		if res.StatusCode != 200 {
			log.Fatalf("status code error: %d %s", res.StatusCode, res.Status)
		}

		// Load the HTML document
		doc, err := goquery.NewDocumentFromReader(res.Body)
		if err != nil {
			log.Fatal(err)
		}

		doc.Find("article.template-item").Each(func(i int, s *goquery.Selection) {

			img, _ := s.Find("a.post-thumbnail img").Attr("src")
			img = saveImages(img)
			img = strings.Replace(trimHtml(img), ".", "", 1)
			// For each item found, get the band and title
			title := s.Find("h2.entry-title").Text()
			href, _ := s.Find("a.post-thumbnail ").Attr("href")

			uuid := uuid.New().String()
			_, err = tx.Exec("INSERT INTO page (title ,thumb ,meta_title ,identifier ,uuid ,is_active) values(?,?,?,?,?,?)", title, img, title, href, uuid, 1)

		})

		_ = tx.Commit()
	}
	fmt.Println(time.Now())
}

func saveImages(imgUrl string) string {
	now := time.Now()
	u, err := url.Parse(imgUrl)
	if err != nil {
		log.Println("parse url failed:", imgUrl, err)
		return ""
	}

	//去掉最左边的'/'
	tmp := strings.TrimLeft(u.Path, "/")
	Ext := filepath.Ext(tmp)
	imgDir := "./book/images/"
	imgDir = imgDir + strconv.Itoa(now.Year()) + "/" + strconv.Itoa(int(now.Month())) + "/" + strconv.Itoa(now.Day()) + "/"

	file, err := os.Stat(imgDir)
	if err != nil || !file.IsDir() {
		dirErr := os.MkdirAll(imgDir, os.ModePerm)
		if dirErr != nil {
			fmt.Println("create dir failed")
			os.Exit(1)
		}
	}

	filename := imgDir + strconv.Itoa(int(now.Unix())) + Ext
	exists := checkExists(filename)
	if exists {
		return filename
	}

	response, err := http.Get(imgUrl)
	if err != nil {
		log.Println("get img_url failed:", err)
		return ""
	}

	defer response.Body.Close()

	data, err := ioutil.ReadAll(response.Body)
	if err != nil {
		log.Println("read data failed:", imgUrl, err)
		return ""
	}

	image, err := os.Create(filename)
	if err != nil {
		log.Println("create file failed:", filename, err)
		return ""
	}
	defer image.Close()
	image.Write(data)
	return filename
}

func checkExists(filename string) bool {
	_, err := os.Stat(filename)
	return err == nil
}
func trimHtml(src string) string {
	//将HTML标签全转换成小写
	re, _ := regexp.Compile("\\<[\\S\\s]+?\\>")
	src = re.ReplaceAllStringFunc(src, strings.ToLower)
	//去除STYLE
	re, _ = regexp.Compile("\\<style[\\S\\s]+?\\</style\\>")
	src = re.ReplaceAllString(src, "")
	//去除SCRIPT
	re, _ = regexp.Compile("\\<script[\\S\\s]+?\\</script\\>")
	src = re.ReplaceAllString(src, "")
	//去除所有尖括号内的HTML代码，并换成换行符
	re, _ = regexp.Compile("\\<[\\S\\s]+?\\>")
	src = re.ReplaceAllString(src, "\n")
	//去除连续的换行符
	re, _ = regexp.Compile("\\s{2,}")
	src = re.ReplaceAllString(src, "\n")
	return strings.TrimSpace(src)
}

func update() {
	fmt.Println(time.Now())
	var url string
	var querySql string

	if action == "update" {
		querySql = "select url as t from books where status='连载中' and DATE_ADD(now(), Interval -72 hour) < updated_at and updated_at < DATE_ADD(now(), Interval -6 hour) limit " + limit
	}

	if action == "updatePart" {
		querySql = "select url as t from books where status='连载中' and DATE_ADD(now(), Interval -480 hour) < updated_at and updated_at < DATE_ADD(now(), Interval -72 hour)"
	}

	if action == "updateAll" {
		querySql = "select url as t from books where status='连载中' and updated_at < DATE_ADD(now(), Interval -480 hour)"
	}
	//var url string error corresponding to variable rows may be bot nil
	rows, err := db.Query(querySql)

	if err != nil {
		panic(err.Error()) // Just for example purpose. You should use proper error handling instead of panic
	}

	defer rows.Close()
	tx, _ := db.Begin()
	var j int = 1
	for rows.Next() {
		if j%1000 == 0 {
			_ = tx.Commit()
			tx, _ = db.Begin()
		}
		j++
		var ContentResult Result
		// Scan the value to []byte
		err = rows.Scan(&url)
		if err != nil {
			panic(err.Error()) // Just for example purpose. You should use proper error handling instead of panic
		}
		_url := fmt.Sprintf("http://www.laidudu.com/book/%s/", url)
		//fmt.Println(url)
		// Request the HTML page.
		res, err := http.Get(_url)
		if err != nil {
			log.Fatal(err)
		}
		defer res.Body.Close()

		if res.StatusCode != 200 {
			fmt.Println("status code error: %d %s", res.StatusCode, res.Status)
			continue
		}

		// Load the HTML document
		doc, err := goquery.NewDocumentFromReader(res.Body)
		if err != nil {
			log.Fatal(err)
		}

		var cUrl string = ""
		var bookId int
		var update bool = false
		err = tx.QueryRow("select book_contents.url,book_contents.book_id from books INNER JOIN book_contents ON books.id=book_contents.book_id where books.url= ? ORDER BY book_contents.id desc limit 1;", url).Scan(&cUrl, &bookId)
		if err != nil {
			err = tx.QueryRow("select id from books where books.url= ? limit 1;", url).Scan(&bookId)
			if err != nil {
				fmt.Printf("query data error: %s\n", err)
				continue
			}
		}

		if cUrl == "" {
			update = true
		}
		var band string
		doc.Find("dt:nth-of-type(n+2) ~ dd").Each(func(i int, s *goquery.Selection) {
			// For each item found, get the band and title
			band = s.Text()
			href, _ := s.Find("a").Attr("href")

			if update {
				ContentResult, err = tx.Exec("INSERT INTO book_contents(book_id,is_active,title,url) values(?,?,?,?)", bookId, 1, band, href)
				if err != nil {
					fmt.Printf("insert data error: %d %s %s \n", bookId, band, href)
					return
				}

			} else {
				if cUrl == href {
					update = true
				}
			}
		})
		if ContentResult != nil {
			ContentLastInsertId, _ := ContentResult.LastInsertId()
			if ContentLastInsertId > 0 {
				_, _ = tx.Exec("update books set last_name=?,last_name_id=? where id=?", band, ContentLastInsertId, bookId)
			}
		}
		if err != nil {
			fmt.Printf("insert data error: %v\n", err)
			return
		}
	}

	_ = tx.Commit()
	fmt.Println(time.Now())
}

func bookContent() string {
	fmt.Println(time.Now())
	var uri string
	var bookId string
	var Id string
	//var url string error corresponding to variable rows may be bot nil
	rows, err := db.Query("select id,book_id,url from book_contents where status=0 order by id desc limit 1000")

	if err != nil {
		panic(err.Error()) // Just for example purpose. You should use proper error handling instead of panic
	}

	defer rows.Close()
	tx, _ := db.Begin()
	for rows.Next() {
		// Scan the value to []byte
		err = rows.Scan(&Id, &bookId, &uri)
		if err != nil {
			panic(err.Error()) // Just for example purpose. You should use proper error handling instead of panic
		}

		Dir := fmt.Sprintf("./book/contents/%s/", bookId)
		file, err := os.Stat(Dir)
		if err != nil || !file.IsDir() {
			dirErr := os.MkdirAll(Dir, os.ModePerm)
			if dirErr != nil {
				fmt.Println("create dir failed")
				os.Exit(1)
			}
		}

		filename := Dir + Id + ".txt"
		exists := checkExists(filename)
		if exists {
			_, _ = tx.Exec("update book_contents set status=? where id=?", 1, Id)
			continue
		}
		uri = fmt.Sprintf("http://www.laidudu.com%s", uri)
		// Request the HTML page.
		res, err := http.Get(uri)
		if err != nil {
			fmt.Println(err)
			continue
		}
		defer res.Body.Close()

		if res.StatusCode != 200 {
			log.Fatalf("status code error: %d %s", res.StatusCode, res.Status)
		}

		// Load the HTML document
		doc, err := goquery.NewDocumentFromReader(res.Body)
		if err != nil {
			fmt.Println(err)
			continue
		}

		content, _ := doc.Find("#content").Html()
		content = strings.Replace(trimHtml(content), "请记住本书首发域名：wwww.laidudu.com。来读读小说手机版阅读网址：m.laidudu.com", "", -1)

		contentFile, err := os.Create(filename)
		if err != nil {
			log.Println("create file failed:", filename, err)
		}
		defer contentFile.Close()
		_, _ = contentFile.Write([]byte(content))
		_, _ = tx.Exec("update book_contents set status=? where id=?", 1, Id)
	}

	_ = tx.Commit()
	fmt.Println(time.Now())
	return ""
}
